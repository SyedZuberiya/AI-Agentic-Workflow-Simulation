# -*- coding: utf-8 -*-
"""AI Agentic Workflow Simulation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXl07UXwg77DLbFCvWWwHGfbl-Qc2O_d
"""

!pip install langchain transformers sentence-transformers pymupdf markdown

!pip install -U langchain langchain-community

from langchain_core.language_models import BaseLanguageModel
from langchain_community.llms import HuggingFacePipeline
from langchain.chains import LLMChain
from langchain_core.prompts import PromptTemplate

from langchain.llms import HuggingFacePipeline
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from transformers import pipeline
from sentence_transformers import SentenceTransformer, util
import markdown
import os

# Agent 1: Fetch content (simulate)
def agent_fetch_content(topic):
    # In real, use web scraping, API calls, or LangChain tools.
    # Here, return dummy market research data for demo.
    print(f"Agent 1 fetching content on: {topic}")
    sample_data = f"""
Market Research Report on {topic}

1. Market Size: The global {topic} market is projected to grow from $10B in 2023 to $20B by 2028.
2. Key Players: Company A, Company B, and Company C dominate the market with 60% share.
3. Trends: Increasing adoption of AI and automation is driving innovation in {topic}.
4. Challenges: Regulatory hurdles and high initial investment slow down adoption.
5. Opportunities: Emerging economies present significant growth opportunities for {topic}.

This data is compiled from various industry reports, analyst insights, and market surveys.
"""
    return sample_data

# Agent 2: Summarize key findings using HuggingFace summarization pipeline
def agent_summarize(text):
    print("Agent 2 summarizing key findings...")
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    # Chunk text for summarization if too long
    max_chunk = 500
    chunks = [text[i:i+max_chunk] for i in range(0, len(text), max_chunk)]
    summaries = []
    for chunk in chunks:
        summary = summarizer(chunk, max_length=120, min_length=30, do_sample=False)
        summaries.append(summary[0]['summary_text'])
    return " ".join(summaries)

# Agent 3: Compile report (Markdown)
def agent_compile_report(topic, full_content, summary):
    print("Agent 3 compiling report...")
    md_report = f"# Market Research Report on {topic}\n\n"
    md_report += "## Executive Summary\n\n"
    md_report += summary + "\n\n"
    md_report += "## Detailed Findings\n\n"
    md_report += full_content + "\n\n"
    md_report += "_Report generated by AI Agentic Workflow Simulation._"

    # Save report as markdown file
    filename = f"market_research_report_on_{topic.replace(' ', '_').lower()}.md"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(md_report)
    print(f"Report saved as {filename}")
    return filename

# Main workflow simulation
def main():
    topic = input("Enter market research topic: ").strip()
    if not topic:
        print("Please enter a valid topic.")
        return

    # Agent 1 fetches content
    content = agent_fetch_content(topic)

    # Agent 2 summarizes content
    summary = agent_summarize(content)

    # Agent 3 compiles report
    report_file = agent_compile_report(topic, content, summary)

    print("\nWorkflow complete. You can open the report file now.")
    print(f"File path: {os.path.abspath(report_file)}")

if __name__ == "__main__":
    main()